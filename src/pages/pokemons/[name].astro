---
import type { GetStaticPaths } from 'astro'
import LayoutMain from '@layouts/LayoutMain.astro'
import PokemonCard from '@components/pokemons/PokemonCard.astro'
import type { PokemonListResponse } from '@interfaces/pokemon-list.response'
import Title from '@components/shared/Title.astro'
import { Icon } from 'astro-icon/components'

export const getStaticPaths = (async () => {
  const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151')
  const { results } = (await response.json()) as PokemonListResponse

  console.log(results)

  return results.map((pokemon) => ({
    params: { name: pokemon.name },
    props: { url: pokemon.url }
  }))
}) satisfies GetStaticPaths

//tomar los parametros de la ruta
const { name } = Astro.params
const { url } = Astro.props
const id = url.split('/').at(-2)
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`
const imageSRC = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`
---

<LayoutMain
  title={`Pokemon API - ${id} ${name}`}
  description=`InformaciÃ³n del pokemon ${name}`
  image={imageSRC}
>
  <section
    class="my-5 mx-10 flex flex-col justify-center items-center text-center"
  >
    <div class="flex flex-row items-center gap-4">
      <div>
        <button onclick="history.back()" class="text-blue-500">Regresar</button>
        <Title>{name}</Title>
      </div>
      <button id="btn-favorite" data-name={name} data-id={id}>
        <Icon data-outline name="heart-outline" size={48} />
        <Icon data-full class="hidden" name="heart-full" size={48} />
      </button>
    </div>
    <PokemonCard name={name} url={url} isBig />
    <audio controls class="mt-5">
      <source type="audio/ogg" src={audioSrc} />
      Your browser does not support the audio element.
    </audio>
  </section>
</LayoutMain>

<style>
  a {
    @apply hover:underline text-blue-500;
  }
  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>

<script>
  // interface FavoritePokemon {
  //   name: string
  //   id: number
  // }

  import type { FavoritePokemon } from '@interfaces/favoritePokemon'

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem('favorites') ?? '[]'
    )

    const btnFavorite = document.querySelector(
      '#btn-favorite'
    ) as HTMLButtonElement

    if (!btnFavorite) return

    const name = btnFavorite.dataset.name ?? ''
    const id = btnFavorite.dataset.id ?? ''
    const isFavorite = favoritePokemons.some((fav) => fav.name === name)

    const heartOutline = btnFavorite.querySelector(
      '[data-outline]'
    ) as HTMLElement

    const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement
    //mostrar el icono de heart full
    if (isFavorite) {
      heartOutline.classList.add('hidden')
      heartFull.classList.remove('hidden')
    }

    const toggleFavorites = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name)
      if (isFavorite) {
        //remover
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name)
      } else {
        // Agregar
        favoritePokemons.push({ id: +id, name: name })
      }
      localStorage.setItem('favorites', JSON.stringify(favoritePokemons))
    }
    // console.log(name)
    btnFavorite.addEventListener('click', () => {
      heartOutline.classList.toggle('hidden')
      heartFull.classList.toggle('hidden')
      toggleFavorites()
    })
  }
  document.addEventListener('astro:page-load', handlePageLoad)
</script>
